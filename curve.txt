void DrawBasic(CDC *pDC, CRect rect) //画整个图区的属性、边框和背景
{
	pDC->SetBkMode(TRANSPARENT); // 设置透明
	CBrush bkbrush(RGB(0x8F, 0xBC, 0x8F));
	pDC->SetBkColor(RGB(0, 0, 0));
	pDC->FillRect(rect, &bkbrush);
	pDC->SetMapMode(MM_ANISOTROPIC);
	pDC->SetWindowExt(rect.Width(), rect.Height());
	pDC->SetViewportExt(rect.Width(), -rect.Height());
	pDC->SetViewportOrg(0, rect.Height()/2);
}

void DrawXAxis(CDC * dc, CRect rect)//画X轴并标X轴坐标
{
	int iWidth = rect.Width();
	int iHeight = rect.Height();
	int iInt = TIME_INTERVAL;
	int iCnt = TIME_MAX/iInt; //18 = 9000/500
	int dx = iWidth/iCnt;
	int i = 0;

	for(i=0; i<iCnt+1; i++)
	{
		int x = (int)(rect.left+i*dx);
		//标X轴刻度值--时间(s)
		if(i%2 == 0)
		{
			char b[32] = {0};
			int iSeconds = i*iInt;//时间：s
			_snprintf(b, 31, _T("%d"), iSeconds);
			CSize size(0, 0);
			CString strX(b);
			size = dc->GetTextExtent(strX);
			int iy = rect.bottom+(int)(size.cy*1.5)+5;
			int iLen=size.cx;
			iy = rect.top;
			if(i == 0) dc->TextOut(x, iy, strX);
			else dc->TextOut(x-iLen/2, iy, strX);
		}
	}
}

void DrawYAxis(CDC * dc, CRect rect)//画Y轴并标Y轴坐标
{
	int iWidth = rect.Width();
	int iHeight = rect.Height();
	int iInt = REV_INTERVAL;
	int iCnt = (REV_MAX-REV_MIN)/iInt; //20=5000/500*2
	int dy = iHeight/iCnt;
	if(dy<0) dy = -dy;

	for( int i=0; i<iCnt+1; i++)
	{
		int y = (int)(rect.bottom+i*dy);
		//标Y轴转速刻度值--rpm
		if(i%2 == 0)
		{
			char v[32] = {0};
			int iRev = (i-iCnt/2)*REV_INTERVAL;
			_snprintf(v, 31, _T("%d"), iRev);
			CSize size(0, 0);
			CString strRev(v);
			size = dc->GetTextExtent(strRev);
			int ix = rect.right-size.cx;
			dc->TextOut(ix, y+size.cy/2, strRev);
		}

		//标Y轴转矩刻度值--N*m
		if(i%2 == 0)
		{
			char v[32] = {0};
			iInt = (200-(-200))/iCnt;
			int iTorque = (i-iCnt/2)*iInt;
			_snprintf(v, 31, _T("%d"), iTorque);
			CSize size(0, 0);
			CString strTorque(v);
			size = dc->GetTextExtent(strTorque);
			int ix = rect.right-45-size.cx;
			dc->TextOut(ix, y+size.cy/2, strTorque);
		}

		//标Y轴温度刻度值--℃
		if(i%2 == 0)
		{
			char v[32] = {0};
			iInt = (120-0)/iCnt;
			int iTemperature = i*iInt;
			_snprintf(v, 31, _T("%d"), iTemperature);
			CSize size(0, 0);
			CString strTemperature(v);
			size = dc->GetTextExtent(strTemperature);
			int ix = rect.right-85-size.cx;
			dc->TextOut(ix, y+size.cy/2, strTemperature);
		}

		//标Y轴振动刻度值--mmps
		if(i%2 == 0)
		{
			char v[32] = {0};
			iInt = (20-0)/iCnt;
			int iVibration = i*iInt;
			_snprintf(v, 31, _T("%d"), iVibration);
			CSize size(0, 0);
			CString striVibration(v);
			size = dc->GetTextExtent(striVibration);
			int ix = rect.right-120-size.cx;
			dc->TextOut(ix, y+size.cy/2, striVibration);
		}
	}
}

void DrawGrid(CDC *dc, CRect rect) //画网格
{
	int iWidth = rect.Width();
	int iHeight = rect.Height();
	int iInt = TIME_INTERVAL;
	int iCnt = TIME_MAX/iInt;
	int dx = iWidth/iCnt;
	int i = 0;

	CPen *old = NULL;
	CPen mline(PS_SOLID, 0, RGB(192, 192, 192));//浅灰
	
	old = dc->SelectObject(&mline);
	for( i=0; i<iCnt+1; i++)
	{
		int x = (int)(rect.left+i*dx);
		dc->MoveTo(x, rect.bottom-1);
		dc->LineTo(x, rect.top+1);
	}

	iCnt = (REV_MAX-REV_MIN)/iInt; //20=5000/500
	int dy = iHeight/iCnt;
	if(dy<0) dy = -dy;
	for( i=0; i<iCnt+1; i++)
	{
		int y = (int)(rect.bottom+i*dy);
		dc->MoveTo(rect.left-1, y);
		dc->LineTo(rect.right+1, y);
	}
	dc->SelectObject(old);
}

void DrawCoordinate(CDC *pDC, CRect rect)
{
	int iDl = DISTANCE_LEFT;
	int iDb = DISTANCE_BOTTOM;
	CRect rectX(rect.left+iDl, rect.bottom+iDb, rect.right, rect.bottom);
	DrawXAxis(pDC, rectX); //画X轴

	CRect rectY(rect.left, rect.top, rect.left+iDl, rect.bottom+iDb);
	DrawYAxis(pDC, rectY); //画Y轴

	CRect rectGrid(rect.left+iDl, rect.top, rect.right, rect.bottom+iDb);
	DrawGrid(pDC, rectGrid); //画网格
}

void DrawRevCurve(CDC* pDC, CRect rect, Rev *rev)
{
	int iDl = DISTANCE_LEFT;
	int iDb = DISTANCE_BOTTOM;
	CRect rectGrid(rect.left+iDl, rect.top, rect.right, rect.bottom+iDb);

	int i = 0;
	int nWidth = rectGrid.Width();
	int nHeight = rectGrid.Height();
	//float fScale = (float)(nHeight/5000/2);

	CPoint aPoint[DATA_COUNT];
	for (i=0; i<rev->iCount; i++)
	{
		aPoint[i].x = rectGrid.left+(i*nWidth)/DATA_COUNT;
		aPoint[i].y = (int)(rev->fRev[i] * nHeight/(5000*2));
	}

	CPen pen;
	pen.CreatePen(PS_SOLID, 1, rev->dwColor); //DB9370
	CPen *oldpen=(CPen *)pDC->SelectObject(&pen);
	pDC->Polyline(aPoint, rev->iCount);
	pDC->SelectObject(oldpen);
	pen.DeleteObject();
}

void DrawVibrationCurve(CDC* pDC, CRect rect, Vibration *vibration)
{
	int iDl = DISTANCE_LEFT;
	int iDb = DISTANCE_BOTTOM;
	CRect rectGrid(rect.left+iDl, rect.top, rect.right, rect.bottom+iDb);

	int i = 0, j = 0;
	int nWidth = rectGrid.Width();
	int nHeight = rectGrid.Height();
	CPoint aPoint[3][DATA_COUNT];
	for(i=0; i<3; i++)
	{
		int iCount = vibration->iCount[i];
		for (j=0; j<iCount; j++)
		{
			aPoint[i][j].x = rectGrid.left + (j * nWidth) / DATA_COUNT;
			aPoint[i][j].y = (int)(vibration->fVibration[i][j]*nHeight/20);
		}
	}

	for(i=0; i<3; i++)
	{
		CPen pen;
		pen.CreatePen(PS_SOLID, 1, vibration->dwColor[i]);
		CPen *oldpen=(CPen *)pDC->SelectObject(&pen);
		pDC->Polyline(aPoint[i], vibration->iCount[i]);
		pDC->SelectObject(oldpen);
		pen.DeleteObject();
	}
}

void DrawTemperatureCurve(CDC* pDC, CRect rect, Temperature *temperature)
{
	int iDl = DISTANCE_LEFT;
	int iDb = DISTANCE_BOTTOM;
	CRect rectGrid(rect.left+iDl, rect.top, rect.right, rect.bottom+iDb);
	
	int i = 0, j = 0;
	int nWidth = rectGrid.Width();
	int nHeight = rectGrid.Height();
	CPoint aPoint[8][DATA_COUNT];
	for(i=0; i<8; i++)
	{
		int iCount = temperature->iCount[i];
		for (j=0; j<iCount; j++)
		{
			aPoint[i][j].x = rectGrid.left + (j * nWidth) / DATA_COUNT;
			aPoint[i][j].y = (int)(temperature->fTemperature[i][j]*nHeight/120);
		}
	}

	for(i=0; i<8; i++)
	{
		CPen pen;
		pen.CreatePen(PS_SOLID, 1, temperature->dwColor[i]);
		CPen *oldpen=(CPen *)pDC->SelectObject(&pen);
		pDC->Polyline(aPoint[i], temperature->iCount[i]);
		pDC->SelectObject(oldpen);
		pen.DeleteObject();
	}
}

void DrawTorqueCurve(CDC* pDC, CRect rect, Torque *torque)
{
	int iDl = DISTANCE_LEFT;
	int iDb = DISTANCE_BOTTOM;
	CRect rectGrid(rect.left+iDl, rect.top, rect.right, rect.bottom+iDb);
	
	int i = 0, j = 0;
	int nWidth = rectGrid.Width();
	int nHeight = rectGrid.Height();
	for(i=0; i<1; i++)
	{
		CPen pen;
		pen.CreatePen(PS_SOLID, 1, torque->dwColor);
		CPen *oldpen=(CPen *)pDC->SelectObject(&pen);
		
		CPoint aPoint[DATA_COUNT];
		for (j=0; j<torque->iCount; j++)
		{
			aPoint[j].x = rectGrid.left + (j * nWidth) / DATA_COUNT;
			aPoint[j].y = (int)(torque->fTorque[j] * nHeight/(200*2));
		}
		pDC->Polyline(aPoint, torque->iCount);
		pDC->SelectObject(oldpen);
		pen.DeleteObject();
	}
}

UINT FuncDrawCurve(LPVOID lParam)
{
	CSmsSenderDlg *pDlg = (CSmsSenderDlg*)lParam;
	CWnd *pWnd = pDlg->GetDlgItem(IDC_STATIC_CURVE);
	CRect rect;
	pWnd->GetClientRect(&rect);
	while(1)
	{
		DWORD dwRet = WaitForMultipleObjects(2, pDlg->m_hDrawCurveEventArray, FALSE, g_iTimeout*1000);
		if(dwRet == 0) break;
		pWnd->Invalidate();
		pWnd->UpdateWindow();
		CDC *pDC = pWnd->GetDC();
		DrawBasic(pDC, rect);
		CRect rectDraw(rect.left, rect.bottom/2, rect.right, -rect.bottom/2);
		DrawCoordinate(pDC, rectDraw);
		srand(time(NULL));
		DrawRevCurve(pDC, rectDraw, &(pDlg->m_Rev));
		DrawVibrationCurve(pDC, rectDraw, &(pDlg->m_Vibration));
		DrawTemperatureCurve(pDC, rectDraw, &(pDlg->m_Temperature));
		DrawTorqueCurve(pDC, rectDraw, &(pDlg->m_Torque));
		pWnd->ReleaseDC(pDC);
		//Sleep(100);
	}
	
	return 0;
}
